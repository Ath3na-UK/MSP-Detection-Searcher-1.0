#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: d644ac39-617f-425f-b27c-514605940ede
# Source File: MSP Detection Searcher 1.0.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
TygAAB+LCAAAAAAABADlWlFv4jgQfj/p/oOVZ0RJSKBIFGlLt6vqunuosHv3hpzEQK4mjhzTlvv1
N06ALcUJdihR706VqibxeMb+Zr6xZ9p/IAF7Inx9gwVG8EcasfjKcqzBr78g1P+dR/MoxvQ2ouQb
XpLB1/EI3RBBAgHj0JhgHiwIR3az1UzSWf/iQCCfxv8LJJBYJ+TKGq9TQZbNP6I4ZM9p85bxZf67
gVSfGujHxioXlMBPAw1XVKw4uYrJSnBMG2i08mkU/EbWE/ZI4iu/28Ve4HXsXtslrcuehWIw5coC
43e2b023ULCIaMhBzBqyWHBG03zxYPeIs4Rwsd7ID2lEYjGO/ibWwG51Og3ker3+xXZUgZTcBmug
0n1UdEJehFWy54cTfH4CCzfS9wyHasVT+al/kQ3eSh7H6Atnq+SavZwdp7lU5LOXdhk4h7t1zwIs
VwngOA3kdDoH21MEzk6hhsQWfhd02Je2hsQE+3dxSF6sgaM3eixYYg1uMU2JSuA4Ug9RsJC+UwdY
lM3LYTpc4g0LHmF9EaWK5ZXh2oYtV6FahCvYpjV6i2m7IxWoUCpD9TAMi2P51XcFshc5tNuQfPP4
ASPUOSVCbfvSOEJ1ImgvQh0dHT+x1IznkyN0hGNCzw5TIrVMBeZzIqZLmCRKKDGN1urhp1RvEJCe
a4PGlp7KcpY9HP8jSiMfdqMQRS0cr1dCsPjsQPoinn4d311zmPwogGUQuh5sqesql1sE455yTckc
wK7XQG01HOYAFlGqkV3fUwLArzAdizUl1zh4HDLKuDWY8FXhHK8PVXAGlMlrb0+m2cv985SCwDVd
asiWPquDxAOpCDh1E6GpuV9Ji7AQUTz/HGMIprB8Hwu90nEbyFOn0SKnfGu8kV+6DkSBo+L6cscs
lHjtIWNCAWESZjLDBY7ncl/e2jtVDXsvF7rHfg3ZhUotm/WQMCf4Sj5ENjH4IHfA0HXcS0gRnpHr
qOw2dJ8uuI/qslDuProenvPacMFYSpBYEJRwFq4A8oCFBM0AxuxtCFIAbIwYR35GREgwtGYreMTw
APyEZlFBxlVr/USjOWzq1ygMKRmCKyouqUq3PHzxIc9AKVCV+Qkov6/ck5k4831FYav5cemwIlGF
1D4ky2jiV5pqHLjjOdUJowyWwquI7VXiC7Nz0CSzD402XDEErqgj8rVcpa5ihHgRMsdu+FLS5Um+
Io8luqeE3FUODTDyFK8lK1faeeL4waQY6f8SuydYBAsdtNXM/hDNF6bU7nmtSuS+M9WA2N3LXhVi
L6hLfSxi14auNFBbrYqkXg5HcW2pVYnQTcLUGoykbRmPoy/f727+52S+6U2d4iZ270Q+39hgdllw
O5Uo3eSycDql/wtqzfZJtWadwvF+qVmnFLxrHGQErYLMDOBzlJprYnOfTn2t8qQ6B09YopXebmFG
yWwBZymbCTTGcYrGhEezBuo1u15y7jvaz4WatZZAj6Ouu55ayX5dBpUVAFkbkD3jLLdlFQBZFEDP
OBbZN8EYlePSrBvc1Nahl1WqnBVrzijLNJG7AoHFWUDSo4XPYucBau/otf/20slbAww8qecW3xAM
21oVgKqx3QHWHk32xcD0PHl3U5/QirscUqcBFt1eYXvjfbrFJa2N0xsbRW0NuQnqjkbZmWH/4VOa
kiVATdLt2M2b9WCZBozTyH8Hd+lf7GZ9qyV30Dp0vHsQHNco/1erHkUcP0fxvIquVnvmzboz2w69
Fm7j47r+XNJ61hRxcFPG13BoeIqAfWtZ3ZBxUsvyNqsa5Ynl/de2e8xju3/x+h8IB/8A83GRJk8o
AAA=#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2015 v4.2.98
     Generated on:       18/03/2018 20:01
     Generated by:       Richard
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2015
#>
#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Call-MSP_Detection_Searcher_1_0_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MSPDetectionSearcher = New-Object 'System.Windows.Forms.Form'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$log = New-Object 'System.Windows.Forms.RichTextBox'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$panel_target_multiple = New-Object 'System.Windows.Forms.Panel'
	$btn_MSIBrowse = New-Object 'System.Windows.Forms.Button'
	$combobox_targets = New-Object 'System.Windows.Forms.ComboBox'
	$label_targeted_multi = New-Object 'System.Windows.Forms.Label'
	$panel_target_single = New-Object 'System.Windows.Forms.Panel'
	$label_target_single = New-Object 'System.Windows.Forms.Label'
	$txtbox_productcode = New-Object 'System.Windows.Forms.TextBox'
	$panel_patchcode = New-Object 'System.Windows.Forms.Panel'
	$label_patchcode = New-Object 'System.Windows.Forms.Label'
	$txtbox_productversion = New-Object 'System.Windows.Forms.TextBox'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$lbl_browse = New-Object 'System.Windows.Forms.Label'
	$txtbox_mspfiletoprocess = New-Object 'System.Windows.Forms.TextBox'
	$btn_open = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	Function Display-MsgBox
	{
		# -Style:
		# 16 Error
		# 32 Question
		# 48 Exclamation
		# 64 Information
		
		# -ButtonSetup
		# 0 OK
		# 1 OKCancel
		# 2 AbortRetryIgnore
		# 3 YesNoCancel
		# 4 YesNo
		# 5 RetryCancel
		
		param (
			[Parameter(Mandatory = $true, Position = 1)]
			$Message,
			[Parameter(Mandatory = $true, Position = 2)]
			$Title,
			[Parameter(Mandatory = $false, Position = 3)]
			$Style = 64,
			[Parameter(Mandatory = $false, Position = 4)]
			$ButtonSetup = 0
		)
		[System.Windows.Forms.MessageBox]::Show($Message, $Title, $ButtonSetup, $Style)
		
	}
	function Append-RichtextboxStatus
	{
		PARAM (
			[Parameter(Mandatory = $true)]
			[string]$Message,
			[string]$MessageColor = "Black",
			[string]$DateTimeColor = "Gray",
			[string]$Component,
			[string]$ComponenetColor = "DarkCyan",
			[String]$ComputerNameColor = "Blue")
		
		$SortableTime = get-date -Format "yyyy-MM-dd HH:mm:ss"
		$Log.SelectionColor = $DateTimeColor
		$Log.AppendText("[$SortableTime] ")
		
		IF ($PSBoundParameters['ComputerName'])
		{
			$Log.SelectionColor = $ComputerNameColor
			$Log.AppendText(("$ComputerName ").ToUpper())
		}
		
		IF ($PSBoundParameters['Component'])
		{
			$Log.SelectionColor = $ComponenetColor
			$Log.AppendText("$Component ")
		}
		
		$Log.SelectionColor = $MessageColor
		$Log.AppendText("$Message`r")
		$Log.Refresh()
		$Log.ScrollToCaret()
		
		Write-Verbose -Message "$SortableTime $Message"
	}
	
	Function Read-OpenFileDialog
	{
		param
		(
			[string]$WindowTitle,
			[string]$InitialDirectory,
			[string]$Filter = 'All files (*.*)|*.*',
			[switch]$AllowMultiSelect
		)
		
		Add-Type -AssemblyName System.Windows.Forms
		$openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
		$openFileDialog.Title = $WindowTitle
		if (![string]::IsNullOrWhiteSpace($InitialDirectory)) { $openFileDialog.InitialDirectory = $InitialDirectory }
		$openFileDialog.Filter = $Filter
		if ($AllowMultiSelect) { $openFileDialog.MultiSelect = $true }
		$openFileDialog.ShowHelp = $true # Without this line the ShowDialog() function may hang depending on system configuration and running from console vs. ISE.
		$openFileDialog.ShowDialog() > $null
		if ($AllowMultiSelect) { return $openFileDialog.Filenames }
		else { return $openFileDialog.Filename }
	}
	Function Convert-CompressedGuidToGuid
	{
		<#
		.SYNOPSIS
			This converts a compressed GUID also known as a product code into a GUID.	
		.DESCRIPTION
			This function will typically be used to figure out the MSI installer GUID
			that matches up with the product code stored in the 'SOFTWARE\Classes\Installer\Products'
			registry path.
		.EXAMPLE
			Convert-CompressedGuidToGuid -CompressedGuid '2820F6C7DCD308A459CABB92E828C144'
		
			This example would output the GUID '{7C6F0282-3DCD-4A80-95AC-BB298E821C44}'
		.PARAMETER CompressedGuid
			The compressed GUID you'd like to convert.
		#>
		[CmdletBinding()]
		[OutputType([System.String])]
		param (
			[Parameter(ValueFromPipeline, ValueFromPipelineByPropertyName, Mandatory)]
			[ValidatePattern('^[0-9a-fA-F]{32}$')]
			[string]$CompressedGuid
		)
		process
		{
			$Indexes = [ordered]@{
				0 = 8;
				8 = 4;
				12 = 4;
				16 = 2;
				18 = 2;
				20 = 2;
				22 = 2;
				24 = 2;
				26 = 2;
				28 = 2;
				30 = 2
			}
			$Guid = '{'
			foreach ($index in $Indexes.GetEnumerator())
			{
				$part = $CompressedGuid.Substring($index.Key, $index.Value).ToCharArray()
				[array]::Reverse($part)
				$Guid += $part -join ''
			}
			$Guid = $Guid.Insert(9, '-').Insert(14, '-').Insert(19, '-').Insert(24, '-')
			$Guid + '}'
		}
	}
	Function Convert-GuidToCompressedGuid
	{
		<#
		.SYNOPSIS
			This converts a GUID to a compressed GUID also known as a product code.	
		.DESCRIPTION
			This function will typically be used to figure out the product code
			that matches up with the product code stored in the 'SOFTWARE\Classes\Installer\Products'
			registry path to a MSI installer GUID.
		.EXAMPLE
			Convert-GuidToCompressedGuid -Guid '{7C6F0282-3DCD-4A80-95AC-BB298E821C44}'
		
			This example would output the compressed GUID '2820F6C7DCD308A459CABB92E828C144'
		.PARAMETER Guid
			The GUID you'd like to convert.
		#>
		[CmdletBinding()]
		[OutputType()]
		param (
			[Parameter(ValueFromPipeline, ValueFromPipelineByPropertyName, Mandatory)]
			[string]$Guid
		)
		begin
		{
			$Guid = $Guid.Replace('-', '').Replace('{', '').Replace('}', '')
		}
		process
		{
			try
			{
				$Groups = @(
				$Guid.Substring(0, 8).ToCharArray(),
				$Guid.Substring(8, 4).ToCharArray(),
				$Guid.Substring(12, 4).ToCharArray(),
				$Guid.Substring(16, 16).ToCharArray()
				)
				$Groups[0..2] | foreach {
					[array]::Reverse($_)
				}
				$CompressedGuid = ($Groups[0..2] | foreach { $_ -join '' }) -join ''
				
				$chararr = $Groups[3]
				for ($i = 0; $i -lt $chararr.count; $i++)
				{
					if (($i % 2) -eq 0)
					{
						$CompressedGuid += ($chararr[$i + 1] + $chararr[$i]) -join ''
					}
				}
				$CompressedGuid
			}
			catch
			{
				Write-Error $_.Exception.Message
			}
		}
	}
	
	Function Set-DetectionInformation
	{
		$txtbox_productcode.Text = $script:msptoprocess.TargetProductCodes
		if ($script:msptoprocess.TargetProductCodes.Count -gt '1') {
			$Msiguidcompressed = Convert-GuidToCompressedGuid -Guid $combobox_targets.Text
			$UninstallPatch = "Msiexec /package $($combobox_targets.Text) /uninstall $($txtbox_productversion.Text) /quiet REBOOT=`"ReallySuppress`""
		}
		elseif ($script:msptoprocess.TargetProductCodes.Count -eq '1') {
			$Msiguidcompressed = Convert-GuidToCompressedGuid -Guid $txtbox_productcode.Text
			$UninstallPatch = "Msiexec /package $($txtbox_productcode.Text) /uninstall $($txtbox_productversion.Text) /quiet REBOOT=`"ReallySuppress`""
		}
		
		$Patchversioncompressed = Convert-GuidToCompressedGuid -Guid $txtbox_productversion.Text
		
		$InstallPatch = "Msiexec /p `"$mspname`" /norestart /qn"
		
		
		$PatchDestectionRule = @"
[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Installer\UserData\S-1-5-18\Products\$Msiguidcompressed\Patches\$Patchversioncompressed]

Detection Rule For Configuration Manager:
SOFTWARE\Microsoft\Windows\CurrentVersion\Installer\UserData\S-1-5-18\Products\$Msiguidcompressed\Patches\$Patchversioncompressed

"@
		
		if ($script:allowremoval -eq '0') {
			Append-RichtextboxStatus -Component 'Patch Table Information' -ComponenetColor 'Black' -Message "MSIPatchMetaDataTable AllowRemoval = 0, Patch does not allow uninstall" -MessageColor 'Red'
			Append-RichtextboxStatus -Component 'Install' -ComponenetColor 'Magenta' -Message $InstallPatch
			Append-RichtextboxStatus -Component 'Detection Registry Key' -ComponenetColor 'Red' -Message $PatchDestectionRule
		} elseif ($script:allowremoval -eq '1') {
			Append-RichtextboxStatus -Component 'Patch Table Information' -ComponenetColor 'Black' -Message "MSIPatchMetaDataTable AllowRemoval = 1, Patch does allow uninstall" -MessageColor 'Green'
			Append-RichtextboxStatus -Component 'Install' -ComponenetColor 'Magenta' -Message $InstallPatch
			Append-RichtextboxStatus -Component 'Uninstall' -ComponenetColor 'Blue' -Message $UninstallPatch
			Append-RichtextboxStatus -Component 'Detection Registry Key' -ComponenetColor 'Red' -Message $PatchDestectionRule
		}
		
	}
	
	function Get-MSPInformation
	{
		$filetoprocess = Read-OpenFileDialog -WindowTitle 'Select the MSP Patch File' -InitialDirectory 'C:\' -Filter 'MSP files (*.msp)|*.msp'
		$txtbox_mspfiletoprocess.Text = $filetoprocess
		$script:mspbasename = (Get-ChildItem $filetoprocess).BaseName
		$script:mspname = (Get-ChildItem $filetoprocess).Name
		$script:msptoprocess = Get-MSISummaryInfo -Path $filetoprocess
		$mspdatatableinfo = Get-MSITable -Path $filetoprocess -Table 'MsiPatchMetadata' | Select-Object -Property Property, Value
		$script:allowremoval = ($mspdatatableinfo | Where-Object -FilterScript { $_.Property -eq 'AllowRemoval' } | Select-Object -Property Value).Value
		$txtbox_productversion.Text = $script:msptoprocess.PackageCode
		
		if ($script:msptoprocess.TargetProductCodes.Count -gt '1') {
			$panel_target_single.Visible = $false
			$panel_target_multiple.Visible = $true
			#Load-ComboBox $combobox_targets (Get-Process)
			Load-ComboBox $combobox_targets ($script:msptoprocess.TargetProductCodes)
			
		} elseif ($script:msptoprocess.TargetProductCodes.Count -eq '1') {
			Set-DetectionInformation
		}
	}
	
	function Get-RKMSIProductCode
	{
		$msitoprocess = Read-OpenFileDialog -WindowTitle 'Select the MSI File' -InitialDirectory 'C:\' -Filter 'MSI files (*.msi)|*.msi'
		$msiproductcode = (Get-MSIProperty -Path $msitoprocess -Property productcode | Select-Object -Property Value).Value
	
		if ($combobox_targets.Items -contains $msiproductcode) {
			$combobox_targets.SelectedItem = $msiproductcode
			$label_targeted_multi.ForeColor = 'Green'
			$label_targeted_multi.Text = 'Located product code in base MSI'
		} else {
			Append-RichtextboxStatus -Message 'Searching MSI for targeted products, outputting to console'
			foreach ($item in $combobox_targets.Items) {
				Append-RichtextboxStatus -MessageColor 'Red' -Message "$item"
			}
			Append-RichtextboxStatus -MessageColor 'Red' -Message "list doesn't contain $msiproductcode"
			Append-RichtextboxStatus -MessageColor 'Red' -Message "This patch is not for that MSI"
		}
	}
	
	$MSPDetectionSearcher_Load={
		#TODO: Initialize Form Controls here
		if (Get-Module -ListAvailable |
		Where-Object { $_.name -eq 'MSI' })
		{
			Import-Module -Name 'MSI'
			Append-RichtextboxStatus -Component 'MSI Module Check' -ComponenetColor 'Black' -MessageColor 'DarkGreen' -Message 'MSI Module is present'
		}
		else
		{
			Append-RichtextboxStatus -Component 'MSI Module Check' -ComponenetColor 'Black' -MessageColor 'Red' -Message 'Warning MSI module not present'
			Append-RichtextboxStatus -Component 'MSI Module Check' -ComponenetColor 'Black' -MessageColor 'Red' -Message 'Please install, https://www.powershellgallery.com/packages/MSI/3.2.26.21626'
		}
	}
	
	$btn_open_Click={
		#TODO: Place custom script here
		$label_targeted_multi.ForeColor = 'Red'
		$label_targeted_multi.Text = 'Choose the product code form the dropdown or browse to your base MSI file'
		$log.Clear()
		Append-RichtextboxStatus -Component 'Console' -ComponenetColor 'Gray' -Message 'Console Cleared'
		$txtbox_productcode.Clear()
		$txtbox_productversion.Clear()
		$combobox_targets.Items.Clear()
		$combobox_targets.Text = $null
		$panel_target_single.Visible = $true
		$panel_target_multiple.Visible = $false
		Get-MSPInformation
	}
	
	
	#region Control Helper Functions
	function Load-ComboBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$ComboBox.Items.Clear()	
		}
		
		if($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$ComboBox.Items.Add($obj)	
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)	
		}
	
		$ComboBox.DisplayMember = $DisplayMember	
	}
	#endregion
	
	$combobox_targets_SelectedIndexChanged={
		#TODO: Place custom script here
		$log.Clear()
		Append-RichtextboxStatus -Component 'Console' -ComponenetColor 'Gray' -Message 'Console Cleared'
		Set-DetectionInformation
		
	}
	
	$btn_MSIBrowse_Click={
		#TODO: Place custom script here
		$log.Clear()
		Append-RichtextboxStatus -Component 'Console' -ComponenetColor 'Gray' -Message 'Console Cleared'
		Get-RKMSIProductCode
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MSPDetectionSearcher.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$btn_MSIBrowse.remove_Click($btn_MSIBrowse_Click)
			$combobox_targets.remove_SelectedIndexChanged($combobox_targets_SelectedIndexChanged)
			$btn_open.remove_Click($btn_open_Click)
			$MSPDetectionSearcher.remove_Load($MSPDetectionSearcher_Load)
			$MSPDetectionSearcher.remove_Load($Form_StateCorrection_Load)
			$MSPDetectionSearcher.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MSPDetectionSearcher.SuspendLayout()
	$groupbox3.SuspendLayout()
	$groupbox2.SuspendLayout()
	$panel_target_multiple.SuspendLayout()
	$panel_target_single.SuspendLayout()
	$panel_patchcode.SuspendLayout()
	$groupbox1.SuspendLayout()
	#
	# MSPDetectionSearcher
	#
	$MSPDetectionSearcher.Controls.Add($groupbox3)
	$MSPDetectionSearcher.Controls.Add($groupbox2)
	$MSPDetectionSearcher.Controls.Add($groupbox1)
	$MSPDetectionSearcher.ClientSize = '1066, 459'
	$MSPDetectionSearcher.Name = 'MSPDetectionSearcher'
	$MSPDetectionSearcher.Text = 'MSP Detection Searcher 1.0'
	$MSPDetectionSearcher.add_Load($MSPDetectionSearcher_Load)
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($log)
	$groupbox3.Location = '12, 266'
	$groupbox3.Name = 'groupbox3'
	$groupbox3.Size = '1042, 181'
	$groupbox3.TabIndex = 2
	$groupbox3.TabStop = $False
	#
	# log
	#
	$log.Dock = 'Fill'
	$log.Location = '3, 16'
	$log.Name = 'log'
	$log.Size = '1036, 162'
	$log.TabIndex = 0
	$log.Text = ''
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($panel_target_multiple)
	$groupbox2.Controls.Add($panel_target_single)
	$groupbox2.Controls.Add($panel_patchcode)
	$groupbox2.Location = '12, 118'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '1042, 128'
	$groupbox2.TabIndex = 1
	$groupbox2.TabStop = $False
	#
	# panel_target_multiple
	#
	$panel_target_multiple.Controls.Add($btn_MSIBrowse)
	$panel_target_multiple.Controls.Add($combobox_targets)
	$panel_target_multiple.Controls.Add($label_targeted_multi)
	$panel_target_multiple.Location = '3, 16'
	$panel_target_multiple.Name = 'panel_target_multiple'
	$panel_target_multiple.Size = '541, 106'
	$panel_target_multiple.TabIndex = 2
	$panel_target_multiple.Visible = $False
	#
	# btn_MSIBrowse
	#
	$btn_MSIBrowse.Location = '451, 44'
	$btn_MSIBrowse.Name = 'btn_MSIBrowse'
	$btn_MSIBrowse.Size = '75, 32'
	$btn_MSIBrowse.TabIndex = 2
	$btn_MSIBrowse.Text = 'Browse'
	$btn_MSIBrowse.UseVisualStyleBackColor = $True
	$btn_MSIBrowse.add_Click($btn_MSIBrowse_Click)
	#
	# combobox_targets
	#
	$combobox_targets.FormattingEnabled = $True
	$combobox_targets.Location = '24, 50'
	$combobox_targets.Name = 'combobox_targets'
	$combobox_targets.Size = '421, 21'
	$combobox_targets.TabIndex = 1
	$combobox_targets.add_SelectedIndexChanged($combobox_targets_SelectedIndexChanged)
	#
	# label_targeted_multi
	#
	$label_targeted_multi.ForeColor = 'Red'
	$label_targeted_multi.Location = '48, 15'
	$label_targeted_multi.Name = 'label_targeted_multi'
	$label_targeted_multi.Size = '427, 23'
	$label_targeted_multi.TabIndex = 0
	$label_targeted_multi.Text = 'Choose the product code form the dropdown or browse to your base MSI file'
	$label_targeted_multi.TextAlign = 'MiddleCenter'
	#
	# panel_target_single
	#
	$panel_target_single.Controls.Add($label_target_single)
	$panel_target_single.Controls.Add($txtbox_productcode)
	$panel_target_single.Dock = 'Left'
	$panel_target_single.Location = '3, 16'
	$panel_target_single.Name = 'panel_target_single'
	$panel_target_single.Size = '541, 109'
	$panel_target_single.TabIndex = 1
	#
	# label_target_single
	#
	$label_target_single.Location = '226, 25'
	$label_target_single.Name = 'label_target_single'
	$label_target_single.Size = '115, 23'
	$label_target_single.TabIndex = 2
	$label_target_single.Text = 'Target Product Code'
	$label_target_single.TextAlign = 'MiddleCenter'
	#
	# txtbox_productcode
	#
	$txtbox_productcode.Location = '24, 51'
	$txtbox_productcode.Name = 'txtbox_productcode'
	$txtbox_productcode.Size = '502, 20'
	$txtbox_productcode.TabIndex = 1
	$txtbox_productcode.TextAlign = 'Center'
	#
	# panel_patchcode
	#
	$panel_patchcode.Controls.Add($label_patchcode)
	$panel_patchcode.Controls.Add($txtbox_productversion)
	$panel_patchcode.Dock = 'Right'
	$panel_patchcode.Location = '550, 16'
	$panel_patchcode.Name = 'panel_patchcode'
	$panel_patchcode.Size = '489, 109'
	$panel_patchcode.TabIndex = 0
	#
	# label_patchcode
	#
	$label_patchcode.Location = '200, 25'
	$label_patchcode.Name = 'label_patchcode'
	$label_patchcode.Size = '100, 23'
	$label_patchcode.TabIndex = 1
	$label_patchcode.Text = 'Patch Code GUID'
	$label_patchcode.TextAlign = 'MiddleCenter'
	#
	# txtbox_productversion
	#
	$txtbox_productversion.Location = '19, 51'
	$txtbox_productversion.Name = 'txtbox_productversion'
	$txtbox_productversion.Size = '446, 20'
	$txtbox_productversion.TabIndex = 0
	$txtbox_productversion.TextAlign = 'Center'
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($lbl_browse)
	$groupbox1.Controls.Add($txtbox_mspfiletoprocess)
	$groupbox1.Controls.Add($btn_open)
	$groupbox1.Location = '12, 12'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '1039, 100'
	$groupbox1.TabIndex = 0
	$groupbox1.TabStop = $False
	#
	# lbl_browse
	#
	$lbl_browse.Dock = 'Top'
	$lbl_browse.Font = 'Microsoft Sans Serif, 9.75pt'
	$lbl_browse.Location = '3, 16'
	$lbl_browse.Name = 'lbl_browse'
	$lbl_browse.Size = '1033, 24'
	$lbl_browse.TabIndex = 2
	$lbl_browse.Text = 'Browse to the MSP patch file you want the tool to search.'
	$lbl_browse.TextAlign = 'MiddleCenter'
	#
	# txtbox_mspfiletoprocess
	#
	$txtbox_mspfiletoprocess.Location = '6, 60'
	$txtbox_mspfiletoprocess.Name = 'txtbox_mspfiletoprocess'
	$txtbox_mspfiletoprocess.Size = '942, 20'
	$txtbox_mspfiletoprocess.TabIndex = 1
	#
	# btn_open
	#
	$btn_open.Location = '954, 53'
	$btn_open.Name = 'btn_open'
	$btn_open.Size = '79, 32'
	$btn_open.TabIndex = 0
	$btn_open.Text = 'Browse'
	$btn_open.UseVisualStyleBackColor = $True
	$btn_open.add_Click($btn_open_Click)
	$groupbox1.ResumeLayout()
	$panel_patchcode.ResumeLayout()
	$panel_target_single.ResumeLayout()
	$panel_target_multiple.ResumeLayout()
	$groupbox2.ResumeLayout()
	$groupbox3.ResumeLayout()
	$MSPDetectionSearcher.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MSPDetectionSearcher.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MSPDetectionSearcher.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MSPDetectionSearcher.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $MSPDetectionSearcher.ShowDialog()

} #End Function

#Call the form
Call-MSP_Detection_Searcher_1_0_psf | Out-Null
